generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output          = "../generated/client"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id      String @id @default(cuid())
  clerkId String @unique
  email   String @unique

  stripeCustomerId String?          @unique
  subscriptionTier SubscriptionTier @default(FREE)
  apiCallsCount    Int              @default(0)
  usageResetAt     DateTime         @default(now())

  // ===== N8N & Northflank Fields =====
  n8nUrl                   String?
  n8nUserEmail             String?
  n8nEncryptionKey         String?
  n8nApiKey                String?
  northflankProjectId      String?
  northflankProjectName    String?
  northflankProjectStatus  String?
  northflankSecretData     Json?
  northflankWorkflowId     String?
  northflankCreatedAt      DateTime?
  templateCompletedAt      DateTime?
  n8nSetupError            String?

  // ===== NEW: Postgres Memories Fields =====
  n8nPostgresCredentialId   String?   // Credential ID ใน n8n
  postgresSchemaInitialized Boolean   @default(false) // ตรวจสอบว่าสร้าง schema แล้ว
  postgresSetupError        String?   // Error message ถ้าสร้างไม่สำเร็จ
  postgresSetupAt           DateTime? // เวลาที่ setup เสร็จ

  subscriptions       Subscription[]
  usageLogs           UsageLog[]
  nangoConnections    NangoConnection[]
  apiUsage            ApiUsage[]
  usageSummaries      UsageSummary[]
  socialCredentials   SocialCredential[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clerkId])
  @@index([stripeCustomerId])
  @@index([email])
  @@index([northflankProjectId])
  @@index([postgresSchemaInitialized])
}

model SocialCredential {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  provider         String
  providerUserId   String?
  accessToken      String?
  refreshToken     String?
  tokenType        String  @default("Bearer")
  expiresAt        DateTime?
  clientId         String?
  clientSecret     String?
  tokenSource      String?

  injectedToN8n      Boolean   @default(false)
  injectedAt         DateTime?
  n8nCredentialIds   Json?
  injectionError     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider, tokenSource])
  @@index([userId])
  @@index([provider])
  @@index([userId, injectedToN8n])
}

model Subscription {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeSubscriptionId String @unique
  stripePriceId        String
  stripeProductId      String
  stripeCustomerId     String

  status          SubscriptionStatus
  tier            SubscriptionTier
  billingInterval BillingInterval    @default(MONTHLY)

  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?

  trialStart DateTime?
  trialEnd   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([stripeSubscriptionId])
  @@index([stripeCustomerId])
  @@index([status])
}

model UsageLog {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  action   String
  count    Int     @default(1)
  endpoint String?
  metadata Json?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([userId, action])
  @@index([createdAt])
}

model NangoConnection {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  connectionId      String @unique
  providerConfigKey String
  provider          String

  scopes   String[]
  metadata Json?

  status       ConnectionStatus @default(ACTIVE)
  errorMessage String?

  n8nCredentialId   String?
  n8nCredentialName String?
  n8nSyncedAt       DateTime?

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastSyncedAt DateTime?
  expiresAt    DateTime?

  @@index([userId])
  @@index([connectionId])
  @@index([providerConfigKey])
  @@index([status])
  @@index([userId, status])
}

model ApiUsage {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  endpoint     String
  method       String
  statusCode   Int
  responseTime Int

  userAgent    String?
  ipAddress    String?
  errorMessage String?
  metadata     Json?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([userId, createdAt])
  @@index([userId, endpoint])
  @@index([createdAt])
}

model UsageSummary {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  year  Int
  month Int

  apiCalls    Int @default(0)
  connections Int @default(0)
  failedCalls Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, year, month])
  @@index([userId])
  @@index([year, month])
}

enum SubscriptionTier {
  FREE
  PRO
  BUSINESS
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
  PAUSED
}

enum ConnectionStatus {
  ACTIVE
  EXPIRED
  REVOKED
  ERROR
  PENDING
  DISCONNECTED
}

model Page {
  id   Int    @id @default(autoincrement())
  name String
}